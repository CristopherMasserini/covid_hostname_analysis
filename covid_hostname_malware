import requests
from datetime import datetime
import pandas as pd
import whois

# Getting the data from the link
# This then splits the file into individual strings at new line characters
# Then ignores the description before the data starts
link = 'https://1984.sh/covid19-domains-feed.txt'
f = requests.get(link)
text_list = f.text.split('\n')
start_index = text_list.index("date,time,hostname")

# Creates some lists to keep track of the data that is being collected
seconds_of_record = list()  # The date and time of the hostname creation using Epoch time
hostnames = list()  # The hostname
time_since_last = list()  # Used to see time between hostname creations
score = list()  # Used to score the record

# Todo change the time created when time = 2020-03-14 15:11:20.684411 to when it was created according to the DNS

# This takes the date and time, combines them and converts it into seconds since the Epoch for easy calculation
# Also puts the hostnames into its list
for record in text_list[start_index + 1:]:
    try:
        # Splits the record into date, time, and hostname
        record_list = record.split(',')
        record_datetime_str = record_list[0] + " " + record_list[1]  # Concatenates the date and time
        hostname = record_list[2]  # The host name
        record_datetime = datetime.strptime(record_datetime_str, '%Y-%m-%d %H:%M:%S.%f')  # Puts into epoch
        # if record_datetime_str == '2020-03-14 15:11:20.684411':
        #     try:
        #         record_datetime = whois.query(hostname).creation_date
        #     except:
        #         # whois does not recognize the TLD
        #         # Todo put these in their own file
        #         pass
        time = record_datetime.timestamp()
        seconds_of_record.append(time)  # Puts the creation time into a list
        hostnames.append(record_list[2])  # Puts the hostname into a list
    except IndexError:  # Got to the last record in the list
        pass

# Puts the seconds since Epoch and hostname into a data frame. This is used so it can be sorted by the seconds.
# This is because at the time of writing this code, not all the data is sorted according to date and time correctly.
pd.options.display.float_format = '{:10f}'.format
data = {"Hostname Creation Time": seconds_of_record, "Hostname": hostnames}
df = pd.DataFrame(data)
df = df.sort_values(by=["Hostname Creation Time"])
print(df)

# This calculates the difference in time that a host name was created since the last host name creation time.
for i in range(0, len(seconds_of_record)):
    time_of_record = df.loc[:, "Hostname Creation Time"]
    time = 0.0
    if i == 0:
        time_since_last.append(time)
    else:
        try:
            del_time = seconds_of_record[i] - seconds_of_record[i - 1]
            time = del_time
            time_since_last.append(del_time)
            if del_time < 0:
                print(seconds_of_record[i])
        except IndexError:
            del_time = seconds_of_record[i] - seconds_of_record[i - 1]
            time = del_time
            time_since_last.append(del_time)

    # Create a score. So depending on the time diff column and the amount of time since the base domain was created,
    # the hostname will get a score. Smaller the score, the higher the risk of being malicious.
    # For time difference: less than one second gets a score of 1, between one and 5 seconds gets a score of 5,
    # Between 5 and 10 seconds gets a score of 10, above 10 seconds gets a score of 15
    if time <= 1:
        score.append(1)
    elif 1 < time <= 5:
        score.append(5)
    elif 5 < time <= 10:
        score.append(10)
    else:
        score.append(15)

# Adds the difference in time and score to the data frame
df["Time diff"] = time_since_last
df["Score"] = score

# Todo Adds to the score for time since the base domain was created: less than 6 months gets a score of 0,
# between 6 months and one year gets a score of 5, between one year and 2 years gets a score of 10,
# Greater than 2 years gets a score of 15


# df.to_csv(r'HostnameData.csv', index=False)



